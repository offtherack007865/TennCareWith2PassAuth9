-- SQL Server Instance:  smg-sql01
USE [Utilities];
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('tc.di_FinalizeDailyFileCollectionsComparisonRaw'))
   DROP PROC [tc].[di_FinalizeDailyFileCollectionsComparisonRaw]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
                       
CREATE PROCEDURE [tc].[di_FinalizeDailyFileCollectionsComparisonRaw]
/* -----------------------------------------------------------------------------------------------------------
   Procedure Name  :  tc.di_FinalizeDailyFileCollectionsComparisonRaw
   Business Analyis:
   Project/Process :   
   Description     :  Finalize DailyFileCollectionsComparisonRaw table.
	  
   Author          :  Philip Morrison 
   Create Date     :  04/04/2025

   ***********************************************************************************************************
   **         Change History                                                                                **
   ***********************************************************************************************************

   Date       Version    Author             Description
   --------   --------   -----------        ------------
   04/04/2025 1.01.001   Philip Morrison    Created

*/ -----------------------------------------------------------------------------------------------------------                                      
AS
BEGIN
	-- Declarations
DECLARE @ApplicationID              int          = 0

DECLARE @Application            varchar(128) = 'TennCareEligility' 

SELECT @ApplicationID = [ApplicationID]
FROM [ADMIN].[Administration].[admin].[Application] 
WHERE [ApplicationName] = @Application


DECLARE @Version                varchar(25)  = '1.00.001'

DECLARE @ProcessID              int          = 0
DECLARE @Process                varchar(128) = 'TennCareEligilityImport'

SELECT @ProcessID = [ProcessID]
FROM [ADMIN].[Administration].[support].[Process]
WHERE [ApplicationID] = @ApplicationID
AND [Name] = @Process

DECLARE @BatchOutID             int
DECLARE @BatchDescription       varchar(1000) = @@ServerName + '  - ' + @Version
DECLARE @BatchDetailDescription varchar(1000)
DECLARE @BatchMessage           varchar(MAX)
DECLARE @User                   varchar(128) = SUSER_NAME()

DECLARE @AnticipatedRecordCount int 
DECLARE @ActualRecordCount      int

SET NOCOUNT ON

BEGIN TRY

--  Initialize Batch
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  NULL, 'BatchStart', @BatchDescription, @ProcessID, @Process
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Truncate Collections Entries Looked Up Today'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	                                   FROM [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday];
	  
    -- Truncate Collections Entries Looked Up Today
    TRUNCATE TABLE [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday];
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Store only the new Entries from the Collections file.'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	  FROM [Staging].[tc].[DailyFileCollectionsComparisonRaw] todays	
      LEFT OUTER JOIN  [TennCareEligibility].[tc].[DailyFileCollectionsComparison] yesterdays
      ON yesterdays.[PatientID] = todays.[PatientID]    
         AND yesterdays.[DOB] = todays.[DOB]
	     AND yesterdays.[SSN] = todays.[SSN]
	     AND yesterdays.[DOS] = todays.[DOS]
      WHERE yesterdays.[PatientID] IS NULL;

	  
    -- Store only the new Entries from the Collections file.
    INSERT INTO [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday]
    (
      [FileName]
	  ,[PatientID]
	  ,[DOB]
	  ,[SSN]
	  ,[DOS]
	  ,[DateImported]
    )
    SELECT 
      todays.[FileName]
	  ,todays.[PatientID]
	  ,todays.[DOB]
	  ,todays.[SSN]
	  ,todays.[DOS]
	  ,todays.[DateImported]
    FROM [Staging].[tc].[DailyFileCollectionsComparisonRaw] todays	
    LEFT OUTER JOIN  [TennCareEligibility].[tc].[DailyFileCollectionsComparison] yesterdays
    ON yesterdays.[PatientID] = todays.[PatientID]    
       AND yesterdays.[DOB] = todays.[DOB]
	   AND yesterdays.[SSN] = todays.[SSN]
	   AND yesterdays.[DOS] = todays.[DOS]
    WHERE yesterdays.[PatientID] IS NULL;
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Delete of todays Collections entries from todays Collections history'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	  FROM [TennCareEligibility].[tc].[CollectionsEntriesLookedUpTodayHistory] todayHistory
	  JOIN [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday] today
      ON today.[PatientID] = todayHistory.[PatientID]    
         AND today.[DOB] = todayHistory.[DOB]
	     AND today.[SSN] = todayHistory.[SSN]
	     AND today.[DOS] = todayHistory.[DOS] 	 
		 AND today.[FileName] = todayHistory.[FileName]; 	 

	  
     -- Delete of todays Collections entries from todays Collections history
	 DELETE [TennCareEligibility].[tc].[CollectionsEntriesLookedUpTodayHistory]
	 FROM [TennCareEligibility].[tc].[CollectionsEntriesLookedUpTodayHistory] todayHistory
	 JOIN [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday] today
       ON today.[PatientID] = todayHistory.[PatientID]    
          AND today.[DOB] = todayHistory.[DOB]
	      AND today.[SSN] = todayHistory.[SSN]
	      AND today.[DOS] = todayHistory.[DOS] 	 
		  AND today.[FileName] = todayHistory.[FileName]; 	 
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Copy Todays Collections entries to History'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	  FROM [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday]

	  
    -- Store only the new Entries from the Collections file.
    INSERT INTO [TennCareEligibility].[tc].[CollectionsEntriesLookedUpTodayHistory]
    (
      [FileName]
	  ,[PatientID]
	  ,[DOB]
	  ,[SSN]
	  ,[DOS]
	  ,[DateImported]
    )
    SELECT 
      [FileName]
	  ,[PatientID]
	  ,[DOB]
	  ,[SSN]
	  ,[DOS]
	  ,[DateImported]
    FROM [TennCareEligibility].[tc].[CollectionsEntriesLookedUpToday];
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
	
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Truncate Yesterdays Collections File Entries'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	  FROM [TennCareEligibility].[tc].[DailyFileCollectionsComparison]; 	 	 

	  
     -- Truncate Yesterdays Collections File Entries
	 TRUNCATE TABLE [TennCareEligibility].[tc].[DailyFileCollectionsComparison]; 	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Re-populate yesterdays Collections for tomorrows comparison'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	  FROM [Staging].[tc].[DailyFileCollectionsComparisonRaw]; 	 	 

	  
     -- Re-populate yesterdays Collections for tomorrows comparison
      INSERT INTO [TennCareEligibility].[tc].[DailyFileCollectionsComparison] 	
	  (
	    [FileName]
	    ,[PatientID]
	    ,[DOB]
	    ,[SSN]
	    ,[DOS]
	    ,[DateImported]
	  )
	  SELECT 
	    [FileName]
	    ,[PatientID]
	    ,[DOB]
	    ,[SSN]
	    ,[DOS]
	    ,[DateImported]
	  FROM [Staging].[tc].[DailyFileCollectionsComparisonRaw];	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
----------------------------------------------------------------------------------------------------------------------------------------------------

--  Close batch
    EXEC Admin.Utilities.logs.di_batch @BatchOutID OUTPUT, @BatchOutID, 'BatchEnd'

END TRY

BEGIN CATCH
DECLARE @Err              int
     ,  @ErrorMessage     varchar(Max)
     ,  @ErrorLine        varchar(128)
     ,  @Workstation      varchar(128) = @Application
     ,  @Procedure        VARCHAR(500)

    IF ERROR_NUMBER() IS NULL 
      SET @Err =0;
    ELSE
      SET @Err = ERROR_NUMBER();

    SET @ErrorMessage = ERROR_MESSAGE()
    SET @ErrorLine    = 'SP Line Number: ' + CAST(ERROR_LINE() as varchar(10)) 
    SET @Workstation  = HOST_NAME()
    SET @Procedure    = @@SERVERNAME + '.' + DB_NAME() + '.' + OBJECT_SCHEMA_NAME(@@ProcID) + '.' + OBJECT_NAME(@@ProcID) + ' - ' + @ErrorLine + ' - ' + LEFT(@BatchDetailDescription, 7)

    EXEC Admin.Utilities.administration.di_ErrorLog  @Application ,@Process, @Version ,@Err, @ErrorMessage, @Procedure,  @User , @Workstation

    SET @BatchMessage = 'Process Failed:  ' +  @ErrorMessage
    EXEC Admin.Utilities.logs.di_batch @BatchOutID OUTPUT, @BatchOutID, 'BatchEnd', @BatchMessage
    RAISERROR(@ErrorMessage, 16,1)
END CATCH


declare @IsOk [bit] 
declare @MyCount [int] 

set @MyCount = 0
select @MyCount = count(*)
  from [TennCareEligibility].[tc].[DailyFileCollectionsComparison]; 	

if (@MyCount > 0) begin
  set @IsOk = 1
  select @IsOk as [IsOk]
  return
end  

set @IsOk = 0
select @IsOk as [IsOk]

END



  
