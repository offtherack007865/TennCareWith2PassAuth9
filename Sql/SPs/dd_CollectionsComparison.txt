-- SQL Server Instance:  smg-sql01
USE [Utilities];
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('tc.dd_CollectionsComparison'))
   DROP PROC [tc].[dd_CollectionsComparison]
GO
CREATE PROCEDURE [tc].[dd_CollectionsComparison]
/* -----------------------------------------------------------------------------------------------------------
   Procedure Name  :  tc.dd_CollectionsComparison
   Business Analyis:
   Project/Process :   
   Description     :  Truncate CollectionsComparison table.
	  
   Author          :  Philip Morrison 
   Create Date     :  07/14/2025

   ***********************************************************************************************************
   **         Change History                                                                                **
   ***********************************************************************************************************

   Date       Version    Author             Description
   --------   --------   -----------        ------------
   07/14/2025 1.01.001   Philip Morrison    Created

*/ -----------------------------------------------------------------------------------------------------------                                   

AS
BEGIN

-- Instance Declarations.
declare @IsOk [bit] 
declare @MyCount [int] 

-- Template Declarations
DECLARE @Application            varchar(128) = 'TennCareEligility' 
DECLARE @Version                varchar(25)  = '1.00.001'

DECLARE @ProcessID              int          = 212
DECLARE @Process                varchar(128) = 'Import'

DECLARE @BatchOutID             int
DECLARE @BatchDescription       varchar(1000) = @@ServerName + '  - ' + @Version
DECLARE @BatchDetailDescription varchar(1000)
DECLARE @BatchMessage           varchar(MAX)
DECLARE @User                   varchar(128) = SUSER_NAME()

DECLARE @AnticipatedRecordCount int 
DECLARE @ActualRecordCount      int

SET NOCOUNT ON

BEGIN TRY

--  Initialize Batch
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  NULL, 'BatchStart', @BatchDescription, @ProcessID, @Process
 ----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = '010/010:  Truncate Collections Comparison'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	                                   FROM [Staging].[tc].[CollectionsComparison];
	  
    -- Truncate Collections Comparison
    TRUNCATE TABLE [Staging].[tc].[CollectionsComparison];
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount
----------------------------------------------------------------------------------------------------------------------------------------------------


--  Close batch
    EXEC Admin.Utilities.logs.di_batch @BatchOutID OUTPUT, @BatchOutID, 'BatchEnd'

set @MyCount = 0
select @MyCount = count(*)
  from [Staging].[tc].[CollectionsComparison];

if (@MyCount > 0) begin
  set @IsOk = 0
  select @IsOk as [IsOk]
  return
end  

set @IsOk = 1
select @IsOk as [IsOk]


END TRY

BEGIN CATCH
DECLARE @Err              int
     ,  @ErrorMessage     varchar(Max)
     ,  @ErrorLine        varchar(128)
     ,  @Workstation      varchar(128) = @Application
     ,  @Procedure        VARCHAR(500)

    IF ERROR_NUMBER() IS NULL 
      SET @Err =0;
    ELSE
      SET @Err = ERROR_NUMBER();

    SET @ErrorMessage = ERROR_MESSAGE()
    SET @ErrorLine    = 'SP Line Number: ' + CAST(ERROR_LINE() as varchar(10)) 
    SET @Workstation  = HOST_NAME()
    SET @Procedure    = @@SERVERNAME + '.' + DB_NAME() + '.' + OBJECT_SCHEMA_NAME(@@ProcID) + '.' + OBJECT_NAME(@@ProcID) + ' - ' + @ErrorLine + ' - ' + LEFT(@BatchDetailDescription, 7)

    EXEC Admin.Utilities.administration.di_ErrorLog  @Application ,@Process, @Version ,@Err, @ErrorMessage, @Procedure,  @User , @Workstation

    SET @BatchMessage = 'Process Failed:  ' +  @ErrorMessage
    EXEC Admin.Utilities.logs.di_batch @BatchOutID OUTPUT, @BatchOutID, 'BatchEnd', @BatchMessage
            
    set @IsOk = 0
    select @IsOk as [IsOk]

    RAISERROR(@ErrorMessage, 16,1)
END CATCH

END
